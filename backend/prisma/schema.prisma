// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  password      String
  role          Role           @relation(fields: [roleId], references: [id])
  roleId        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  leaveRequests LeaveRequest[]
  approvals     Approval[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveRequest {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  reason    String     @db.Text
  status    String     @default("PENDING")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  approvals Approval[]
}

model Approval {
  id             Int          @id @default(autoincrement())
  leaveRequestId Int
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id])
  approverId     Int
  approver       User         @relation(fields: [approverId], references: [id])
  approvalOrder  Int
  status         String       @default("PENDING")
  remarks        String?      @db.Text
  approvedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
